diff -uNr cryptopp/cpu.cpp cryptopp.mod/cpu.cpp
--- cryptopp/cpu.cpp	2018-04-08 11:47:12.000000000 +0300
+++ cryptopp.mod/cpu.cpp	2019-02-03 15:12:23.906917955 +0200
@@ -43,12 +43,6 @@
 # include <sys/utsname.h>
 #endif
 
-// The cpu-features header and source file are located in $ANDROID_NDK_ROOT/sources/android/cpufeatures
-// setenv-android.sh will copy the header and source file into PWD and the makefile will build it in place.
-#if defined(__ANDROID__)
-# include "cpu-features.h"
-#endif
-
 #ifdef CRYPTOPP_GNU_STYLE_INLINE_ASSEMBLY
 # include <signal.h>
 # include <setjmp.h>
@@ -386,178 +380,31 @@
 
 inline bool CPU_QueryNEON()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_ASIMD) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__arm__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_NEON) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_ASIMD) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_ASIMD) != 0)
-		return true;
-#elif defined(__linux__) && defined(__arm__)
-	if ((getauxval(AT_HWCAP) & HWCAP_ARM_NEON) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// Core feature set for Aarch32 and Aarch64.
 	return true;
-#endif
-	return false;
 }
 
 inline bool CPU_QueryCRC32()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_CRC32) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__aarch32__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_CRC32) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_CRC32) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_CRC32) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// No compiler support. CRC intrinsics result in a failed compiled.
-	return false;
-#endif
-	return false;
+		return false;
 }
 
 inline bool CPU_QueryPMULL()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_PMULL) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__aarch32__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_PMULL) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_PMULL) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_PMULL) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// No compiler support. PMULL intrinsics result in a failed compiled.
-	return false;
-#endif
 	return false;
 }
 
 inline bool CPU_QueryAES()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_AES) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__aarch32__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_AES) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_AES) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_AES) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// http://stackoverflow.com/questions/45637888/how-to-determine-armv8-features-at-runtime-on-ios
-	struct utsname systemInfo;
-	systemInfo.machine[0] = '\0';
-	uname(&systemInfo);
-
-	// The machine strings below are known ARM8 devices
-	std::string machine(systemInfo.machine);
-	if (machine.substr(0, 7) == "iPhone6" || machine.substr(0, 7) == "iPhone7" ||
-		machine.substr(0, 7) == "iPhone8" || machine.substr(0, 7) == "iPhone9" ||
-		machine.substr(0, 5) == "iPad4" || machine.substr(0, 5) == "iPad5" ||
-		machine.substr(0, 5) == "iPad6" || machine.substr(0, 5) == "iPad7")
-	{
-		return true;
-	}
-#endif
 	return false;
 }
 
 inline bool CPU_QuerySHA1()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_SHA1) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__aarch32__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_SHA1) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_SHA1) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_SHA1) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// http://stackoverflow.com/questions/45637888/how-to-determine-armv8-features-at-runtime-on-ios
-	struct utsname systemInfo;
-	systemInfo.machine[0] = '\0';
-	uname(&systemInfo);
-
-	// The machine strings below are known ARM8 devices
-	std::string machine(systemInfo.machine);
-	if (machine.substr(0, 7) == "iPhone6" || machine.substr(0, 7) == "iPhone7" ||
-		machine.substr(0, 7) == "iPhone8" || machine.substr(0, 7) == "iPhone9" ||
-		machine.substr(0, 5) == "iPad4" || machine.substr(0, 5) == "iPad5" ||
-		machine.substr(0, 5) == "iPad6" || machine.substr(0, 5) == "iPad7")
-	{
-		return true;
-	}
-#endif
 	return false;
 }
 
 inline bool CPU_QuerySHA2()
 {
-#if defined(__ANDROID__) && defined(__aarch64__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM64)  != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM64_FEATURE_SHA2) != 0))
-		return true;
-#elif defined(__ANDROID__) && defined(__aarch32__)
-	if (((android_getCpuFamily() & ANDROID_CPU_FAMILY_ARM) != 0) &&
-		((android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_SHA2) != 0))
-		return true;
-#elif defined(__linux__) && defined(__aarch64__)
-	if ((getauxval(AT_HWCAP) & HWCAP_SHA2) != 0)
-		return true;
-#elif defined(__linux__) && defined(__aarch32__)
-	if ((getauxval(AT_HWCAP2) & HWCAP2_SHA2) != 0)
-		return true;
-#elif defined(__APPLE__) && defined(__aarch64__)
-	// http://stackoverflow.com/questions/45637888/how-to-determine-armv8-features-at-runtime-on-ios
-	struct utsname systemInfo;
-	systemInfo.machine[0] = '\0';
-	uname(&systemInfo);
-
-	// The machine strings below are known ARM8 devices
-	std::string machine(systemInfo.machine);
-	if (machine.substr(0, 7) == "iPhone6" || machine.substr(0, 7) == "iPhone7" ||
-		machine.substr(0, 7) == "iPhone8" || machine.substr(0, 7) == "iPhone9" ||
-		machine.substr(0, 5) == "iPad4" || machine.substr(0, 5) == "iPad5" ||
-		machine.substr(0, 5) == "iPad6" || machine.substr(0, 5) == "iPad7")
-	{
-		return true;
-	}
-#endif
 	return false;
 }
 
